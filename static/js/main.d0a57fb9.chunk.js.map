{"version":3,"sources":["context.js","helpers.js","components/TaskForm.js","components/TaskList.js","components/ListForm.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","uuid","replace","c","r","Math","random","toString","TaskForm","props","changeHandler","event","stateObject","target","getAttribute","value","setState","handleSubmit","preventDefault","options","method","headers","body","JSON","stringify","state","fetch","then","res","json","data","console","log","context","getTasks","catch","err","listId","name","description","due","status","onSubmit","this","className","onChange","placeholder","type","Component","contextType","Context","Array","prototype","findById","id","filtered","filter","item","_id","length","TaskList","renderTasks","tasks","task","taskElements","map","key","statusBox","checked","handleCheck","taskId","fetchOptions","response","whatever","ListForm","route","submitData","result","getLists","getListTasks","Error","onClick","updateTask","addTask","buttonText","taskList","App","a","username","editForm","lists","listElements","updateListDisplay","deleteList","thingToDisplay","list","doCreateListThing","listTasks","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d0a57fb9.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({});","export function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tvar r = (Math.random() * 16) | 0,\n\t\t\tv = c == 'x' ? r : (r & 0x3) | 0x8;\n\t\treturn v.toString(16);\n\t});\n}\n","import React from 'react';\nimport Context from '../context';\nimport { uuid } from '../helpers';\nimport TaskList from './TaskList';\n\nconst TASK_STATUSES = [ 'pending', 'complete' ];\n\nexport default class TaskForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            listId: props.listId || 'error',\n\t\t\tname: props.name || '',\n\t\t\tdescription: props.description || '',\n\t\t\tdue: props.due || '',\n\t\t\tstatus: props.status || 'pending'\n\t\t};\n\t}\n\tchangeHandler = (event) => {\n\t\tlet field = event.target.getAttribute('name');\n\t\tlet stateObject = {};\n\t\tstateObject[field] = event.target.value;\n\t\tthis.setState(stateObject);\n\t};\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n        // When not live:\n\t\t// let route = `http://localhost:5555/api/tasks`;\n\t\t// When live:\n\t\tlet route = 'https://api-todo-ji.herokuapp.com/api/tasks';\n        let options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(this.state),\n        };\n        fetch(route, options)\n        .then((res) => { return res.json()})\n        .then((data) =>\n        {\n            console.log('should have added a new task: ', data);\n            this.context.getTasks();\n        })\n        .catch((err) =>\n        {\n            console.log('might not have added a new task: ', err);\n        })\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<div className=\"taskRow\">\n\n\t\t\t\t\t<input name=\"name\" value={this.state.name} onChange={this.changeHandler} placeholder='Name' />\n\n\t\t\t\t\t<input name=\"description\" value={this.state.description} onChange={this.changeHandler} placeholder='Description' />\n\n\t\t\t\t\t<input name=\"due\" value={this.state.due} onChange={this.changeHandler} placeholder='due' />\n                    <input className=\"small\" type=\"submit\" value=\"Add Task\" />\n                </div>\n\t\t\t</form>\n\t\t);\n\t}\n}\nTaskForm.contextType = Context;","import React from 'react';\nimport Context from '../context';\nimport {uuid} from '../helpers';\nimport TaskForm from './TaskForm';\n\nArray.prototype.findById = function(id)\n{\n    console.log('filter array by id: ', id);\n    console.log('this arg: ', this);\n    let filtered = this.filter((item) =>\n    {\n        return item._id === id;\n    });\n    if (filtered.length > 1)\n    {\n        console.log('Why does life hate met?');\n    }\n    return filtered[0];\n}\nexport default class TaskList extends React.Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            tasks: [],\n            taskElements: null,\n        }\n    }\n    renderTasks = () =>\n    {\n\n        console.log('getting tasks...');\n        this.setState({\n            tasks: this.context.tasks.filter((task) =>\n            {\n                return task.listId === this.props.listId;\n            })\n        }, function()\n        {\n            this.setState({\n                taskElements: this.state.tasks.map((task) =>\n                {\n                    return (\n                    <li key={uuid()}><span>{task.name}</span> - <span>{task.description}</span><span>{task.due}</span>{this.statusBox(task)}</li>\n                    )\n                })\n            }, function()\n            {\n                console.log('state after update: ', this.state);\n            })\n        })\n\n    }\n    statusBox = (task) =>\n    {\n        return (<input key={uuid()} id={task._id} type='checkbox' checked={(task.status === 'complete')} onChange={this.handleCheck} />)\n    }\n    handleCheck = (event) =>\n    {\n        // do not prevent default here because I actually want it to happen as normal\n        let taskId = event.target.getAttribute('id');\n        let task = this.state.tasks.findById(taskId);\n        let fetchOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({status: task.status === 'complete' ? 'pending' : 'complete' })\n        }\n        // When not live:\n        // fetch(`http://localhost:5555/api/tasks/${taskId}`, fetchOptions)\n        // When live:\n        fetch(`https://api-todo-ji.herokuapp.com/api/tasks/${taskId}`, fetchOptions)\n        .then((response) => { return response.json()})\n        .then((data) =>\n        {\n            //check to see if it actually updated...\n            console.log('update data: ', data);\n            this.context.getTasks()\n            .then((whatever) =>\n            {\n                return this.renderTasks();\n            })\n            .catch((err) =>\n            {\n                console.log('This will never error....so.....');\n            })\n\n            // why won't my checkbox re-render?!?!?\n        })\n        .catch((err) =>\n        {\n            console.log('failed to update: ', err);\n        })\n    }\n    componentDidMount()\n    {\n        this.renderTasks();\n    }\n    render(){\n        return (\n            <section className=\"taskList\">\n                <ul>\n                    {this.state.taskElements}\n                    <li key={uuid()}><TaskForm listId={this.props.listId} /></li>\n                </ul>\n\n            </section>\n        )\n    }\n}\nTaskList.contextType = Context;","import React from 'react';\nimport Context from '../context';\nimport { uuid } from '../helpers';\nimport TaskList from './TaskList';\nexport default class ListForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t_id: props._id || 'new',\n\t\t\tname: props.name || '',\n\t\t\tdescription: props.description || ''\n\t\t};\n\t}\n\tchangeHandler = (event) => {\n\t\tlet field = event.target.getAttribute('name');\n\t\tlet stateObject = {};\n\t\tstateObject[field] = event.target.value;\n\t\tthis.setState(stateObject);\n\t};\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconsole.log('first state: ', this.state);\n\t\t// When it's not live:\n\t\t// let route = 'http://localhost:5555/api/lists';\n\t\t// When it is live:\n\t\tlet route = 'https://api-todo-ji.herokuapp.com/api/lists';\n\t\t// we need the _id in state to make stuff work but we don't actually want to submit it\n\t\tlet submitData = { ...this.state };\n\t\tdelete submitData._id;\n\t\tlet fetchOptions = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify(submitData)\n\t\t};\n\t\tif (this.state._id !== 'new') {\n\t\t\tfetchOptions.method = 'PUT';\n\t\t\troute += `/${this.state._id}`;\n\t\t}\n\t\t// send all of the state data to the update list api endpoint\n\t\tconsole.log('state: ', this.state);\n\t\tconsole.log('route: ', route);\n\t\tconsole.log('fetchOptions: ', fetchOptions);\n\t\tfetch(route, fetchOptions)\n\t\t\t.then((data) => {\n\t\t\t\treturn data.json();\n\t\t\t})\n\t\t\t.then((result) => {\n\t\t\t\t// call get lists again to update my app\n\t\t\t\tconsole.log('result: ', result);\n\t\t\t\tthis.context.getLists();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log('Error updating/creating list: ', err);\n\t\t\t});\n\t};\n\tgetListTasks = (event) => {\n\t\t// Check to see if this is a JavaScript event object (making assumptions because instanceof would be a better check)\n\t\tlet listId;\n\t\tif (event.target) {\n\t\t\tlistId = event.target.getAttribute('id');\n\t\t} else if (typeof event === 'string') {\n\t\t\tlistId = event;\n\t\t} else {\n\t\t\tthrow new Error('I have no idea what you are trying to do...');\n\t\t}\n\t\tif (event === 'new') {\n\t\t\treturn null;\n\t\t}\n\t\tlet listTasks = this.context.tasks.filter((task) => {\n\t\t\treturn task.listId && task.listId === listId;\n\t\t});\n\n\t\treturn listTasks.map((item) => {\n\t\t\treturn (\n\t\t\t\t<li key={item._id} id={item._id} onClick={this.updateTask}>\n\t\t\t\t\t{item.name || 'Unknown'}\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t};\n\tcomponentWillUnmount() {\n\t\tconsole.log('unmounting');\n\t}\n\taddTask = (event) => {\n\t\tevent.preventDefault();\n\t};\n\trender() {\n\t\tlet buttonText = 'Create';\n        let taskList = null;\n\t\tif (this.state._id !== 'new') {\n\t\t\tbuttonText = 'Update';\n            taskList = <TaskList listId={this.props._id} />\n\t\t}\n\t\treturn (\n\t\t\t<section className=\"forms-section\">\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<div className=\"form-field\">\n\t\t\t\t\t\t<label>Name</label>\n\t\t\t\t\t\t<input name=\"name\" value={this.state.name} onChange={this.changeHandler} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-field\">\n\t\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t\t<input name=\"description\" value={this.state.description} onChange={this.changeHandler} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<input type=\"submit\" value={buttonText} />\n\t\t\t\t</form>\n                {taskList}\n\t\t\t</section>\n\t\t);\n\t}\n}\nListForm.contextType = Context;\n","import React from 'react';\nimport ListForm from './components/ListForm';\nimport './App.css';\nimport Context from './context';\nimport { uuid } from './helpers';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttasks: [],\n\t\t\ttaskList: [],\n\t\t\teditForm: '',\n\t\t\tlistId: '',\n\t\t\tlists: [],\n\t\t\tlistElements: [],\n\t\t\tlistTasks: [],\n\t\t\tthingToDisplay: null,\n\t\t};\n\t}\n\n\tgetTasks = async () => {\n\t\t// When not live:\n\t\t// return await fetch('http://localhost:5555/api/tasks')\n\t\t// When live:\n\t\treturn await fetch('https://api-todo-ji.herokuapp.com/api/tasks')\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tconsole.log('data from api: ', data);\n\t\t\t\tthis.setState({\n\t\t\t\t\ttasks: data,\n\t\t\t\t\ttaskList: data.map((item) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={item._id} id={item._id} onClick={this.updateTask}>\n\t\t\t\t\t\t\t\t{item.username || 'Unknown'}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t\teditForm: ''\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch();\n\t};\n\n\tgetLists = () => {\n\t\t// When not live:\n\t\t// fetch('http://localhost:5555/api/lists')\n\t\t// When live:\n\t\tfetch('https://api-todo-ji.herokuapp.com/api/lists')\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tconsole.log('lists from api: ', data);\n\t\t\t\tthis.setState({\n\t\t\t\t\tlists: data,\n\t\t\t\t\tlistElements: data.map((item) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={item._id}>\n\t\t\t\t\t\t\t\t<li id={item._id} onClick={this.updateListDisplay}>\n\t\t\t\t\t\t\t\t\t{item.name || 'Unknown'}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<button className=\"deleteButton\" id={item._id} onClick={this.deleteList}>\n\t\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t\teditForm: null,\n\t\t\t\t\tthingToDisplay: null\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch();\n\t};\n\n\tupdateListDisplay = (event) => {\n\t\tevent.preventDefault();\n\t\tlet id = event.target.getAttribute('id');\n\t\tlet list = this.state.lists.filter((list) => {\n\t\t\treturn list._id === id;\n\t\t});\n\t\t// because this returns an array and i only want the first one...\n\t\tlist = list[0];\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tthingToDisplay: null\n\t\t\t},\n\t\t\tfunction() {\n\t\t\t\tthis.setState({\n\t\t\t\t\tthingToDisplay: <ListForm key={uuid()} {...list} />\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t};\n\tdeleteList = (event) => {\n\t\tconsole.log('deleting...');\n\t\tevent.preventDefault();\n\t\tlet id = event.target.getAttribute('id');\n\t\tconsole.log('id: ', id);\n\t\tlet fetchOptions = {\n\t\t\tmethod: 'DELETE'\n\t\t};\n\t\t// When not live:\n\t\t// fetch(`http://localhost:5555/api/lists/${id}`, fetchOptions)\n\t\t// When live:\n\t\tfetch(`https://api-todo-ji.herokuapp.com/api/lists/${id}`, fetchOptions)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tconsole.log('response from api: ', data);\n\t\t\t\tthis.getLists();\n\t\t\t})\n\t\t\t.catch();\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.getTasks();\n\t\tthis.getLists();\n\t}\n\n\tdoCreateListThing = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({\n\t\t\tthingToDisplay: <ListForm key={uuid()} />\n\t\t});\n  };\n  \n\n\n\t// This uses a single global context to share the state of the App compontent to everything else\n\t// I should be ashamed of myself for doing this\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Context.Provider value={{ ...this.state, getLists: this.getLists, getTasks: this.getTasks }}>\n\t\t\t\t\t<section className=\"controls\">\n\t\t\t\t\t\t<section className=\"buttons\">\n\t\t\t\t\t\t\t<button onClick={this.doCreateListThing}>Create List</button>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section className=\"my-lists\">\n\t\t\t\t\t\t\t<h2>My Lists</h2>\n\t\t\t\t\t\t\t<ul>{this.state.listElements}</ul>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"content\"> {this.state.thingToDisplay}</section>\n\t\t\t\t</Context.Provider>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}